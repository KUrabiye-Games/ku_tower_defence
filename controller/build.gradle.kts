/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.8/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
  
    
    // Plugin for JavaFX support
    id("org.openjfx.javafxplugin") version "0.1.0"
    
    // Apply the java plugin to add support for Java
    java
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    
    // JavaFX dependencies
    implementation(libs.javafx.base)
    implementation(libs.javafx.controls)
    implementation(libs.javafx.fxml)
    implementation(libs.javafx.graphics)
    implementation(libs.javafx.media)
    
    // Project dependencies
    implementation(project(":model"))
    implementation(project(":util"))
    implementation(project(":persistence"))
}

// Configure source sets - this helps with IDE recognition
sourceSets {
    main {
        java.srcDirs("src/main/java")
    }
    test {
        java.srcDirs("src/test/java")
    }
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(24)
        // Enable automatic download of JDK 24 if not present
        vendor = JvmVendorSpec.ADOPTIUM
    }
}

// Configure JavaFX plugin
javafx {
    version = "22" // Use latest compatible version
    modules = listOf("javafx.controls", "javafx.fxml", "javafx.media", "javafx.graphics")
}



tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
